{
  "version": 3,
  "sources": ["../bundle-AF7VdI/strip-cf-connecting-ip-header.js", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-AF7VdI/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-AF7VdI/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\StretzS\\inequality\\apps\\db-proxy\\.wrangler\\tmp\\dev-i58wlK",
  "sourcesContent": ["function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "export interface Env {\n  DB: D1Database;\n  SIM_ALPHA?: string;\n  SIM_BETA?: string;\n}\n\ntype SnapshotParams = {\n  region: string;\n  year: number;\n  redistribution_rate: number;\n  include_wealth_tax: boolean;\n  notes?: string | null;\n};\n\nconst JSON_HEADERS = { \"content-type\": \"application/json; charset=utf-8\" };\n\nfunction ok(data: unknown, status = 200) {\n  return new Response(JSON.stringify(data), { status, headers: JSON_HEADERS });\n}\nfunction bad(msg: string, status = 400) {\n  return ok({ error: msg }, status);\n}\n\nfunction allowCORS(req: Request, res: Response): Response {\n  const origin = req.headers.get(\"origin\") ?? \"\";\n  const allow =\n    origin === \"http://127.0.0.1:3000\" ||\n    origin === \"http://localhost:3000\" ||\n    origin.endsWith(\".pages.dev\") ||\n    origin.endsWith(\".workers.dev\");\n  if (allow) {\n    const h = new Headers(res.headers);\n    h.set(\"Access-Control-Allow-Origin\", origin);\n    h.set(\"Access-Control-Allow-Credentials\", \"true\");\n    h.set(\"Vary\", \"Origin\");\n    return new Response(res.body, { status: res.status, headers: h });\n  }\n  return res;\n}\n\nasync function sha256Hex(input: string): Promise<string> {\n  const digest = await crypto.subtle.digest(\"SHA-256\", new TextEncoder().encode(input));\n  return [...new Uint8Array(digest)].map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\nfunction canonicalize(o: any): string {\n  if (o === null || typeof o !== \"object\") return JSON.stringify(o);\n  if (Array.isArray(o)) return `[${o.map(canonicalize).join(\",\")}]`;\n  const keys = Object.keys(o).sort();\n  return `{${keys.map(k => `${JSON.stringify(k)}:${canonicalize(o[k])}`).join(\",\")}}`;\n}\n\nexport default {\n  async fetch(req: Request, env: Env): Promise<Response> {\n    if (req.method === \"OPTIONS\") {\n      return new Response(null, {\n        headers: {\n          \"Access-Control-Allow-Origin\": req.headers.get(\"origin\") ?? \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,POST,OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n          \"Access-Control-Allow-Credentials\": \"true\",\n          \"Vary\": \"Origin\"\n        }\n      });\n    }\n\n    const url = new URL(req.url);\n    const { pathname, searchParams } = url;\n\n    try {\n      if (pathname === \"/api/health\") {\n        return allowCORS(req, ok({ ok: true, service: \"inequality-edge-api\", time: new Date().toISOString() }));\n      }\n\n      if (pathname === \"/api/baseline\" && req.method === \"GET\") {\n        const region = (searchParams.get(\"region\") || \"DE\").toUpperCase();\n        const from = Number(searchParams.get(\"from\") || 2014);\n        const to = Number(searchParams.get(\"to\") || 2024);\n        if (!Number.isFinite(from) || !Number.isFinite(to) || from > to) {\n          return allowCORS(req, bad(\"Invalid from/to range\"));\n        }\n        const stmt = env.DB.prepare(\n          `SELECT year, gini FROM baseline_series\n           WHERE region = ?1 AND year BETWEEN ?2 AND ?3\n           ORDER BY year`\n        ).bind(region, from, to);\n        const { results } = await stmt.all<{year:number; gini:number}>();\n        return allowCORS(req, ok({ region, from, to, data: results }));\n      }\n\n      if (pathname === \"/api/simulate\" && req.method === \"POST\") {\n        const body = (await req.json()) as SnapshotParams;\n        const region = (body.region || \"DE\").toUpperCase();\n        const year = Number(body.year);\n        const r = Number(body.redistribution_rate);\n        const wt = !!body.include_wealth_tax;\n\n        if (!Number.isFinite(year)) return allowCORS(req, bad(\"year is required\"));\n        if (!(r >= 0 && r <= 1)) return allowCORS(req, bad(\"redistribution_rate must be 0..1\"));\n\n        const row = await env.DB.prepare(\n          \"SELECT gini FROM baseline_series WHERE region = ?1 AND year = ?2\"\n        ).bind(region, year).first<{ gini:number }>();\n        if (!row) return allowCORS(req, bad(\"baseline not found for region/year\", 404));\n\n        const alpha = env.SIM_ALPHA ? Number(env.SIM_ALPHA) : 0.04;\n        const beta  = env.SIM_BETA ? Number(env.SIM_BETA) : 0.005;\n\n        const baseline = row.gini;\n        let gini_after = baseline - alpha * r - (wt ? beta : 0);\n        gini_after = Math.max(0, gini_after);\n\n        return allowCORS(req, ok({\n          region, year,\n          baseline_gini: baseline,\n          params: { redistribution_rate: r, include_wealth_tax: wt },\n          model: { name: \"linear_mvp\", version: \"v1\", alpha, beta },\n          gini_after,\n          delta: gini_after - baseline\n        }));\n      }\n\n      if (pathname === \"/api/snapshot\" && req.method === \"POST\") {\n        const b = (await req.json()) as SnapshotParams;\n        const payload = {\n          region: (b.region || \"DE\").toUpperCase(),\n          year: Number(b.year),\n          redistribution_rate: Number(b.redistribution_rate),\n          include_wealth_tax: !!b.include_wealth_tax,\n          version: \"v1\",\n          notes: b.notes ?? null\n        };\n        if (!Number.isFinite(payload.year)) return allowCORS(req, bad(\"year is required\"));\n        if (!(payload.redistribution_rate >= 0 && payload.redistribution_rate <= 1)) {\n          return allowCORS(req, bad(\"redistribution_rate must be 0..1\"));\n        }\n\n        const id = await sha256Hex(canonicalize(payload));\n        await env.DB.prepare(\n          `INSERT OR IGNORE INTO parameter_snapshots\n           (id, region, year, redistribution_rate, include_wealth_tax, version, notes)\n           VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)`\n        ).bind(\n          id,\n          payload.region,\n          payload.year,\n          payload.redistribution_rate,\n          payload.include_wealth_tax ? 1 : 0,\n          payload.version,\n          payload.notes\n        ).run();\n\n        return allowCORS(req, ok({ id }));\n      }\n\n      if (pathname.startsWith(\"/api/snapshot/\") && req.method === \"GET\") {\n        const id = pathname.split(\"/\").pop() || \"\";\n        const row = await env.DB\n          .prepare(\"SELECT id, created_at, region, year, redistribution_rate, include_wealth_tax, version, notes FROM parameter_snapshots WHERE id = ?1\")\n          .bind(id)\n          .first<{\n            id: string; created_at: string; region: string; year: number;\n            redistribution_rate: number; include_wealth_tax: number; version: string; notes: string | null;\n          }>();\n        if (!row) return allowCORS(req, bad(\"not found\", 404));\n\n        return allowCORS(req, ok({\n          ...row,\n          include_wealth_tax: !!row.include_wealth_tax\n        }));\n      }\n\n      return allowCORS(req, bad(\"Not found\", 404));\n    } catch (err: any) {\n      return allowCORS(req, ok({ error: err?.message ?? String(err) }, 500));\n    }\n  }\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\src\\\\index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\.wrangler\\\\tmp\\\\bundle-AF7VdI\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\.wrangler\\\\tmp\\\\bundle-AF7VdI\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\.wrangler\\\\tmp\\\\bundle-AF7VdI\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
