{
  "version": 3,
  "sources": ["../bundle-M08HrX/strip-cf-connecting-ip-header.js", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-M08HrX/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-M08HrX/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\StretzS\\inequality\\apps\\db-proxy\\.wrangler\\tmp\\dev-0BqvbZ",
  "sourcesContent": ["function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "// apps/db-proxy/src/index.ts \u2014 add region normalization (e.g., SN -> DE)\nexport interface Env {\n  DB: D1Database;\n  SIM_ALPHA?: string;\n  SIM_BETA?: string;\n}\n\ntype SeriesQuery = {\n  indicator?: string;\n  group?: string;\n  region?: string;\n  from?: number;\n  to?: number;\n  scenario?: string;\n};\n\nconst JSON_HEADERS = { \"content-type\": \"application/json; charset=utf-8\" };\nconst ok = (data: unknown, status = 200) => new Response(JSON.stringify(data), { status, headers: JSON_HEADERS });\nconst bad = (msg: string, status = 400) => ok({ error: msg }, status);\n\nfunction allowCORS(req: Request, res: Response): Response {\n  const origin = req.headers.get(\"origin\") ?? \"\";\n  const allow =\n    origin === \"http://127.0.0.1:3000\" ||\n    origin === \"http://localhost:3000\" ||\n    origin.endsWith(\".pages.dev\") ||\n    origin.endsWith(\".workers.dev\");\n  if (allow) {\n    const h = new Headers(res.headers);\n    h.set(\"Access-Control-Allow-Origin\", origin);\n    h.set(\"Access-Control-Allow-Credentials\", \"true\");\n    h.set(\"Vary\", \"Origin\");\n    return new Response(res.body, { status: res.status, headers: h });\n  }\n  return res;\n}\n\n// Helper to parse ?t=2000-2025 style ranges\nconst parseRange = (t: string | null) => {\n  if (!t) return { from: undefined, to: undefined };\n  const [a,b] = t.split(\"-\");\n  const from = Number(a); const to = Number(b);\n  return { from: Number.isFinite(from) ? from : undefined, to: Number.isFinite(to) ? to : undefined };\n};\n\n// ---- NEW: normalize regions (temporary fallback)\n// Map German ISO state codes (BW,BY,...,SN,...) to national 'DE' if no regional series exists yet.\nconst STATE_TO_DE = new Set([\n  \"BW\",\"BY\",\"BE\",\"BB\",\"HB\",\"HH\",\"HE\",\"MV\",\"NI\",\"NW\",\"RP\",\"SL\",\"SN\",\"ST\",\"SH\",\"TH\"\n]);\nfunction normalizeRegion(input: string): { resolved: string; input: string; fallback: boolean } {\n  const up = (input || \"\").toUpperCase();\n  if (up === \"DE\") return { resolved: \"DE\", input: up, fallback: false };\n  if (STATE_TO_DE.has(up)) return { resolved: \"DE\", input: up, fallback: true };\n  return { resolved: up, input: up, fallback: false };\n}\n\nexport default {\n  async fetch(req: Request, env: Env): Promise<Response> {\n    if (req.method === \"OPTIONS\") {\n      return new Response(null, {\n        headers: {\n          \"Access-Control-Allow-Origin\": req.headers.get(\"origin\") ?? \"*\",\n          \"Access-Control-Allow-Methods\": \"GET,POST,OPTIONS\",\n          \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n          \"Access-Control-Allow-Credentials\": \"true\",\n          \"Vary\": \"Origin\"\n        }\n      });\n    }\n\n    const url = new URL(req.url);\n    const { pathname, searchParams } = url;\n\n    try {\n      // Health\n      if (pathname === \"/api/health\") {\n        return allowCORS(req, ok({ ok: true, service: \"inequality-edge-api\", time: new Date().toISOString() }));\n      }\n\n      // --- Series endpoint with normalization ---\n      if (pathname === \"/api/series\" && req.method === \"GET\") {\n        const indicator = (searchParams.get(\"d\") || searchParams.get(\"indicator\") || \"gini\").toLowerCase();\n        const group = (searchParams.get(\"g\") || searchParams.get(\"group\") || \"\").toLowerCase();\n        const regionRaw = (searchParams.get(\"r\") || searchParams.get(\"region\") || \"DE\");\n        const t = searchParams.get(\"t\");\n        const { from: fromQ, to: toQ } = parseRange(t);\n        const from = Number(searchParams.get(\"from\") || fromQ || 2014);\n        const to = Number(searchParams.get(\"to\") || toQ || 2024);\n        const scenario = searchParams.get(\"s\") || searchParams.get(\"scenario\") || \"baseline\";\n\n        if (!Number.isFinite(from) || !Number.isFinite(to) || from > to) {\n          return allowCORS(req, bad(\"Invalid from/to range\"));\n        }\n\n        const norm = normalizeRegion(regionRaw);\n\n        if (indicator === \"gini\") {\n          const stmt = env.DB.prepare(\n            `SELECT year, gini AS value\n             FROM baseline_series\n             WHERE region = ?1 AND year BETWEEN ?2 AND ?3\n             ORDER BY year`\n          ).bind(norm.resolved, from, to);\n          const { results } = await stmt.all<{year:number; value:number}>();\n          return allowCORS(req, ok({\n            indicator, group,\n            region_input: norm.input,\n            region_resolved: norm.resolved,\n            region_fallback: norm.fallback,\n            scenario, from, to,\n            data: results\n          }));\n        }\n\n        // Unsupported indicators -> empty data (no FE error spam)\n        return allowCORS(req, ok({\n          indicator, group,\n          region_input: norm.input,\n          region_resolved: norm.resolved,\n          region_fallback: norm.fallback,\n          scenario, from, to,\n          data: []\n        }));\n      }\n\n      // Keep other routes 404 here; your earlier Worker has /api/baseline, /api/simulate, etc.\n      return allowCORS(req, bad(\"Not found\", 404));\n    } catch (err: any) {\n      return allowCORS(req, ok({ error: err?.message ?? String(err) }, 500));\n    }\n  }\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\src\\\\index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\.wrangler\\\\tmp\\\\bundle-M08HrX\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\.wrangler\\\\tmp\\\\bundle-M08HrX\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\StretzS\\\\inequality\\\\apps\\\\db-proxy\\\\.wrangler\\\\tmp\\\\bundle-M08HrX\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
